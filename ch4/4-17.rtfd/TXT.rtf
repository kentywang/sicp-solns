{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf500
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww22840\viewh12980\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 {{\NeXTGraphic 4-17.JPG \width4740 \height3560 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 \
Extra frame is due to let creating an immediately invoked lambda expression that \'93hard scopes\'94 the defined variables within the frame, so that querying for them won\'92t leave the first frame. In a correct program, the internal definitions are all at the beginning and don\'92t reference one another during definition evaluation (although they can during application), so there is never an instance where a variable is evaluated while it is still unassigned, making its behavior identical in both sequential evaluation and a pseudo-simultaneous setup as given by the book here via a let expression.\
\
To implement the simultaneous scope rule without constructing an extra frame, we could just scan through the body to find the defines like before, but just use that information to add defines to *unassigned* within the same frame and then set them to the defined values given.\
\
Addendum: While Racket may do simultaneous scoping, it doesn\'92t seem to reorder variable definitions with respect to each other. So non-procedures that look at yet-to-be-defined variables will still cause erroneous behavior.}