  (assign val (op make-compiled-procedure) (label entry24) (reg env))
  (goto (label after-lambda25))
entry24
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (n)) (reg argl) (reg env))
  (save continue)
  (save env)
  (assign proc (op lookup-variable-value) (const =) (reg env))
  (assign val (const 1))
  (assign argl (op list) (reg val))
  (assign val (op lookup-variable-value) (const n) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch29))
compiled-branch30
  (assign continue (label after-call31))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
primitive-branch29
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call31
  (restore env)
  (restore continue)
  (test (op false?) (reg val))
  (branch (label false-branch27))
true-branch26
  (assign val (const 1))
  (goto (reg continue))
false-branch27
  (assign proc (op lookup-variable-value) (const *) (reg env))
  (save continue)
  (save proc)
  (save env)
  (assign proc (op lookup-variable-value) (const factorial-alt) (reg env))
  (save proc)
  (assign proc (op lookup-variable-value) (const -) (reg env))
  (assign val (const 1))
  (assign argl (op list) (reg val))
  (assign val (op lookup-variable-value) (const n) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch32))
compiled-branch33
  (assign continue (label after-call34))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
primitive-branch32
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  after-call34
  (assign argl (op list) (reg val))
  (restore proc)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch35))
compiled-branch36
  (assign continue (label after-call37))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
primitive-branch35
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
after-call37
  (assign argl (op list) (reg val))
  (restore env)
  (assign val (op lookup-variable-value) (const n) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch38))
compiled-branch39
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
primitive-branch38
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
after-call40
after-if28
after-lambda25
  (perform (op define-variable!) (const factorial-alt) (reg val) (reg env))
  (assign val (const ok))

By swapping the order of evaluating the variable n and the recursive factorial
call, the variable evaluation happens second, so we don't need to save
and restore the argl register around the recursive factorial evaluation. However,
we will now need to save and restore the env register to evaluate the variable,
so the number of saves/restores is the same as the original formulation.